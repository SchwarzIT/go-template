stages:
  - static_analysis
  - test

semgrep:
  stage: static_analysis
  image: returntocorp/semgrep
  script: semgrep

  rules:
  # Scan changed files in MRs, block on new issues only (existing issues ignored)
  - if: $CI_MERGE_REQUEST_IID
  # Scan all files on default branch, block on any issues
  # - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

  variables:
    SEMGREP_RULES: >- # more at semgrep.dev/explore
      p/auto

  # == Optional settings in the `variables:` block

  # Instead of `SEMGREP_RULES:`, use rules set in Semgrep App.
  # Get your token from semgrep.dev/manage/settings.
  #   SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN

  # Receive inline MR comments (requires Semgrep App account)
  # Setup instructions: https://semgrep.dev/docs/notifications/#gitlab-merge-request-comments
  #   GITLAB_TOKEN: $PAT

  # Never fail the build due to findings on pushes.
  # Instead, just collect findings for semgrep.dev/manage/findings
  #   SEMGREP_AUDIT_ON: push

  # Upload findings to GitLab SAST Dashboard [step 1/2]
  # See also the next step.
  #   SEMGREP_GITLAB_JSON: "1"

  # Change job timeout (default is 1800 seconds; set to 0 to disable)
  #   SEMGREP_TIMEOUT: 300

  # Upload findings to GitLab SAST Dashboard (remove `script:` line above) [step 2/2]
  # script: semgrep-agent --gitlab-json > gl-sast-report.json || true
  # artifacts:
  #   reports:
  #     sast: gl-sast-report.json

golang:
  stage: test
  image: golang:1.21
  script:
    - make download
    - make lint
    {{ if .Extensions.grpc.base -}}
    - make protolint
    - make protobreaking
    {{- end }}
    - make test
    - make govulncheck
