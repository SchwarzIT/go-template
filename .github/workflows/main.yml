---
# based on https://github.com/mvdan/github-actions-golang
name: CI

on:
  pull_request:
    branches: ["main"]
    paths-ignore: ["docs/**"]

  push:
    branches: ["main"]
    paths-ignore: ["docs/**"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.16.x, 1.17.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v2

      # cache go modules
      - uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run linting & unittest
        run: make ci

      - name: Build package
        run: make build

      - name: Create a test project with defaults values
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: ./out/bin/gt -c pkg/gotemplate/testdata/values.yml

      - name: Create a test project with defaults values
        if: matrix.os == 'windows-latest'
        run: ./out/bin/gt.exe -c pkg/gotemplate/testdata/values.yml

      - name: Create go.mod files for test-project
        run: go mod tidy
        working-directory: ./testing-project

      - name: Run CI pipeline for test-project
        run: make ci
        if: matrix.os == 'ubuntu-latest'
        working-directory: ./testing-project

      - name: Create build for test-project
        run: make build
        working-directory: ./testing-project

      - name: Make docker build
        run: make docker
        if: matrix.os == 'ubuntu-latest'
        working-directory: ./testing-project

      - name: Execute test project-build
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: ./out/bin/testing
        working-directory: ./testing-project

      - name: Execute test project-build
        if: matrix.os == 'windows-latest'
        run: ./out/bin/testing.exe
        working-directory: ./testing-project
